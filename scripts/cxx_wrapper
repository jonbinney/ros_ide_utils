#!/usr/bin/env python
import sys, subprocess, argparse, os, os.path, uuid
import yaml

output_dir = os.environ['CXX_WRAPPER_OUTPUT_DIR']
actual_cxx = '/usr/bin/c++'

filename_out = os.path.join(output_dir, str(uuid.uuid1()))
print filename_out

print sys.argv

# Parse the arguments as if we were g++/clang
parser = argparse.ArgumentParser(description='Fake parser that approximates g++/clang')
parser.add_argument('-o', dest='output_file')
parser.add_argument('-c', dest='compile_only', action='store_true')
parser.add_argument('-I', dest='include_directories', action='append')
parser.add_argument('-L', dest='library_directories', action='append')
parser.add_argument('-l', dest='link_libraries', action='append')
parser.add_argument('-D', dest='compile_defs', action='append', default=[])
parser.add_argument('-shared', dest='shared', action='store_true')
parser.add_argument('-rdynamic', dest='rdynamic', default=[], nargs='*')
parser.add_argument('-fPIC', dest='fpic', action='store_true')
parser.add_argument('input_files', default=[], nargs='*')
args, unknown_args = parser.parse_known_args()

# Run the actual compiler and get the output
cxx_cmd = sys.argv[:]
cxx_cmd[0] = actual_cxx
p = subprocess.Popen(cxx_cmd, stdout=subprocess.PIPE)
p.wait()
output = p.communicate()[0]

result = {
	'cwd' : os.getcwd(),
	'output_file' : args.output_file,
	'compile_only' : args.compile_only,
	'include_directories' : args.include_directories,
	'library_directories' : args.library_directories,
	'link_libraries' : args.link_libraries,
	'compile_defs' : args.compile_defs,
	'rdynamic' : args.rdynamic,
	'fpic' : args.fpic,
	'input_files' : args.input_files,
	'unknown_args' : unknown_args,
	'cxx_cmd' : cxx_cmd
}

print '==========='
print output
f_out = open(filename_out, 'w+')
yaml.dump(result, f_out)
f_out.close()